$grid-breakpoints: (
 xs: 0,
 sm: 576px,
 md: 768px,
 lg: 992px,
 xl: 1200px,
 hd: 1920px
) !default;

$container-max-widths: (
 sm: 540px,
 md: 720px,
 lg: 960px,
 xl: 1140px,
 hd: 1860px
) !default;

$spacer: 1rem !default;
$spacers: () !default;
$spacers: map-merge(
 (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 2,
  6: $spacer * 3,
  7: $spacer * 4.5
 ),
 $spacers
);
$font_spacers: 1rem !default;
$font_spacers: ();
$font_spacers: map-merge(
 (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer * 0.75,
  4: $spacer * 1,
  5: $spacer * 1.25,
  6: $spacer * 1.5,
  7: $spacer * 1.75,
  8: $spacer * 2
 ),
 $font_spacers
);

$sizes: () !default;
$sizes: map-merge(
 (
  25: 25%,
  50: 50%,
  75: 75%,
  100: 100%,
  auto: auto
 ),
 $sizes
);

@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
 $n: index($breakpoint-names, $name);
 @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//>> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
 $min: map-get($breakpoints, $name);
 @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
//>> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
 $next: breakpoint-next($name, $breakpoints);
 @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//>> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//""  (Returns a blank string)
//>> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//"-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
 @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
 $min: breakpoint-min($name, $breakpoints);
 @if $min {
  @media (min-width: $min) {
   @content;
  }
 } @else {
  @content;
 }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
 $max: breakpoint-max($name, $breakpoints);
 @if $max {
  @media (max-width: $max) {
   @content;
  }
 } @else {
  @content;
 }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
 $min: breakpoint-min($lower, $breakpoints);
 $max: breakpoint-max($upper, $breakpoints);

 @if $min != null and $max != null {
  @media (min-width: $min) and (max-width: $max) {
   @content;
  }
 } @else if $max == null {
  @include media-breakpoint-up($lower, $breakpoints) {
   @content;
  }
 } @else if $min == null {
  @include media-breakpoint-down($upper, $breakpoints) {
   @content;
  }
 }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
 $min: breakpoint-min($name, $breakpoints);
 $max: breakpoint-max($name, $breakpoints);

 @if $min != null and $max != null {
  @media (min-width: $min) and (max-width: $max) {
   @content;
  }
 } @else if $max == null {
  @include media-breakpoint-up($name, $breakpoints) {
   @content;
  }
 } @else if $min == null {
  @include media-breakpoint-down($name, $breakpoints) {
   @content;
  }
 }
}

@each $breakpoint in map-keys($grid-breakpoints) {
 @include media-breakpoint-up($breakpoint) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @each $prop, $abbrev in (margin: m, padding: p) {
   @each $size, $length in $spacers {
    .#{$abbrev}#{$infix}-#{$size} {
     #{$prop}: $length !important;
    }
    .#{$abbrev}t#{$infix}-#{$size},
    .#{$abbrev}y#{$infix}-#{$size} {
     #{$prop}-top: $length !important;
    }
    .#{$abbrev}r#{$infix}-#{$size},
    .#{$abbrev}x#{$infix}-#{$size} {
     #{$prop}-right: $length !important;
    }
    .#{$abbrev}b#{$infix}-#{$size},
    .#{$abbrev}y#{$infix}-#{$size} {
     #{$prop}-bottom: $length !important;
    }
    .#{$abbrev}l#{$infix}-#{$size},
    .#{$abbrev}x#{$infix}-#{$size} {
     #{$prop}-left: $length !important;
    }
   }
  }

  // Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)
  @each $size, $length in $spacers {
   @if $size != 0 {
    .m#{$infix}-n#{$size} {
     margin: -$length !important;
    }
    .mt#{$infix}-n#{$size},
    .my#{$infix}-n#{$size} {
     margin-top: -$length !important;
    }
    .mr#{$infix}-n#{$size},
    .mx#{$infix}-n#{$size} {
     margin-right: -$length !important;
    }
    .mb#{$infix}-n#{$size},
    .my#{$infix}-n#{$size} {
     margin-bottom: -$length !important;
    }
    .ml#{$infix}-n#{$size},
    .mx#{$infix}-n#{$size} {
     margin-left: -$length !important;
    }
   }
  }

  // Some special margin utils
  .m#{$infix}-auto {
   margin: auto !important;
  }
  .mt#{$infix}-auto,
  .my#{$infix}-auto {
   margin-top: auto !important;
  }
  .mr#{$infix}-auto,
  .mx#{$infix}-auto {
   margin-right: auto !important;
  }
  .mb#{$infix}-auto,
  .my#{$infix}-auto {
   margin-bottom: auto !important;
  }
  .ml#{$infix}-auto,
  .mx#{$infix}-auto {
   margin-left: auto !important;
  }

  //font-Util (ex.F-xl-4:1rem) Device specific Font-size
  @each $prop, $abbrev in (font-size: f) {
   @each $size, $length in $font_spacers {
    .#{$abbrev}#{$infix}-#{$size} { 
     #{$prop}: $length !important;
    }
   }
  }
 }
}
